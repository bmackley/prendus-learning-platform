import {XAPIVideoEventInfo} from '../interfaces/xapi-video-event-info.interface.ts';
import {XAPIQuizEventInfo} from '../interfaces/xapi-quiz-event-info.interface.ts';
import {XAPIVideoStatic} from '../interfaces/xapi-video-static.interface.ts';
import {XAPIVideoDynamic} from '../interfaces/xapi-video-dynamic.interface.ts';
import {XAPIExtensions} from '../interfaces/xapi-extensions.interface.ts';

const sendStatement = (prendusServerEndpointUrl: string, eventInfo: XAPIVideoEventInfo | XAPIQuizEventInfo, sync?: boolean): void => {
    const postBody = {
        eventInfo
    };

    if (!sync) {
        const request = new XMLHttpRequest();
        request.open('POST', prendusServerEndpointUrl, true);
        request.setRequestHeader('content-type', 'application/json');
        request.send(JSON.stringify(postBody));
    }
    else {
        // This is here only for the beforeunload event. Unless the request is synchronous, Chrome and potentially other browsers ignore the request on beforeunload
        const request = new XMLHttpRequest();
        request.open('POST', prendusServerEndpointUrl, false);
        request.setRequestHeader('content-type', 'application/json');
        request.send(JSON.stringify(postBody));
    }
};

const sendVideoStatement = (prendusServerEndpointUrl: string, verb: string, extensions: XAPIExtensions, staticValues: XAPIVideoStatic, dynamicValues: XAPIVideoDynamic, sync?: boolean) => {

    const eventInfo: XAPIVideoEventInfo = {
        verb,
        extensions,
        videoId: staticValues.videoId,
        userFullName: staticValues.userFullName,
        userEmail: staticValues.userEmail,
        courseId: staticValues.courseId,
        baseUri: staticValues.baseUri,
        fullUrl: staticValues.fullUrl,
        timestamp: dynamicValues.timestamp,
        videoTime: dynamicValues.videoTime,
        muted: dynamicValues.muted,
        currentRate: dynamicValues.currentRate,
        currentVolume: dynamicValues.currentVolume
    };

    sendStatement(prendusServerEndpointUrl, eventInfo, sync);
};

const sendQuizStatement = (prendusServerEndpointUrl: string, eventInfo: XAPIQuizEventInfo, sync?: boolean) => {
    sendStatement(prendusServerEndpointUrl, eventInfo, sync);
};

export const XAPIService = {
    sendVideoStatement,
    sendQuizStatement
};
