const assert = require('chai').assert;

import {FirebaseService} from '../firebase.service.ts';

describe('Running FirebaseService tests with one import in the app', function() {

    describe('The user can initialize and switch between Firebase databases.', function() {
        it('should initialize the database once without error', function() {
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
        });

        it('should initialize the database multiple times without error', function() {
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
        });

        it('should allow multiple distinct Firebase databases to be initialized', function() {
            FirebaseService.init('AIzaSyANTSoOA6LZZDxM7vqIlAl37B7IqWL-6MY', 'prendus.firebaseapp.com', 'https://prendus.firebaseio.com', 'prendus.appspot.com', 'Prendus');
        });

        it('should allow switching between Firebase databases', function() {
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            FirebaseService.init('AIzaSyANTSoOA6LZZDxM7vqIlAl37B7IqWL-6MY', 'prendus.firebaseapp.com', 'https://prendus.firebaseio.com', 'prendus.appspot.com', 'Prendus');
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            FirebaseService.init('AIzaSyANTSoOA6LZZDxM7vqIlAl37B7IqWL-6MY', 'prendus.firebaseapp.com', 'https://prendus.firebaseio.com', 'prendus.appspot.com', 'Prendus');
        });
    });

    describe('The user can create a Firebase user from email and password.', function() {
        this.timeout(10000);

        it('should create a user given an email and password', async function(done) {
            const email = 'test@gmail.com';
            const password = 'password';

            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');

            const createUser = async (email, password) => {
                try {
                    const user = await FirebaseService.createUserWithEmailAndPassword(email, password);
                    assert.isDefined(user);
                }
                catch(error) {
                    throw error;
                }
            };

            try {
                await createUser(email, password);
            }
            catch(error) {
                if (error.code === 'auth/email-already-in-use') {
                    await FirebaseService.logOutUser();
                    const testUser = await FirebaseService.logInUserWithEmailAndPassword(email, password);
                    await testUser.delete();
                    await createUser(email, password);
                }
                else {
                    throw error;
                }
            }

            done();
        });

        it('should fail to create a user and handle the error', async function(done) {
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');

            try {
                const user = await FirebaseService.createUserWithEmailAndPassword(undefined, undefined);
            }
            catch(error) {
                done();
            }
        });
    });

    describe('Log a user into Firebase', function() {
        this.timeout(10000);

        it('should log a user in given login info and return the user', async function(done) {
            const email = 'test@gmail.com';
            const password = 'password';

            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');

            const logInUser = async (email, password) => {
                try {
                    const user = await FirebaseService.logInUserWithEmailAndPassword(email, password);
                    assert.isDefined(user);
                }
                catch(error) {
                    throw error;
                }
            };

            try {
                await logInUser(email, password);
            }
            catch(error) {
                if (error.code === 'auth/user-not-found') {
                    const user = await FirebaseService.createUserWithEmailAndPassword(email, password);
                    await FirebaseService.logOutUser();
                    await logInUser(email, password);
                }
                else {
                    throw error;
                }
            }

            done();
        });

        it('should fail to log in and receive the error', async function(done) {
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');

            try {
                const user = await FirebaseService.logInUserWithEmailAndPassword(undefined, undefined);
            }
            catch(error) {
                done();
            }
        });
    });


    describe('The currently logged in user information can be retrieved.', function() {
        this.timeout(10000);

        it('should return the logged in user object', async function(done) {
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            const email = 'test@gmail.com';
            const password = 'password';

            await FirebaseService.logInUserWithEmailAndPassword(email, password);
            const user = FirebaseService.getLoggedInUser();
            assert.equal(user.email, email);
            done();
        });

        it('should return null when no user is logged in', async function(done) {
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            await FirebaseService.logOutUser();
            const user = FirebaseService.getLoggedInUser();
            assert.isNull(user);
            done();
        });
    });

    describe('A user can be logged out.', function() {
        this.timeout(10000);

        it('should log the user out', async function(done) {
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            await FirebaseService.logInUserWithEmailAndPassword('test@gmail.com', 'password');
            await FirebaseService.logOutUser();
            const user = FirebaseService.getLoggedInUser();
            assert.isNull(user);
            done();
        });
    });

    describe('The user can set data at a particular path.', function() {
        this.timeout(10000);

        it('should write data at a particular path', async function(done) {
            await FirebaseService.remove('test/');
            await FirebaseService.set('test/', {
                test: 'this is test data'
            });

            const testData = await FirebaseService.get('test/');

            assert.equal(testData.test, 'this is test data');

            done();
        });

        it('should fail to write the data and handle the error', async function(done) {
            try {
                await FirebaseService.set('testFailure/', {
                    test: 'this is test data'
                });
            }
            catch(error) {
                done();
            }
        });
    });

    describe('User can get data from a specific path.', function() {
        this.timeout(10000);

        it('should get data from a path with data', async function(done) {
            await FirebaseService.set('test/', {
                test: 'this is test data'
            });

            const testData = await FirebaseService.get('test/');

            assert.equal(testData.test, 'this is test data');

            done();
        });

        it('should fail to get data and handle the error', async function(done) {
            try {
                await FirebaseService.get('testFailure/');
            }
            catch(error) {
                done();
            }
        });
    });

    describe('The user can delete data at a specific path.', function() {
        this.timeout(10000);

        it('should delete the data at a specific path', async function(done) {
            await FirebaseService.set('test/', {
                test: 'this is test data'
            });
            await FirebaseService.remove('test/');
            const testData = await FirebaseService.get('test/');
            assert.isNull(testData);
            done();
        });

        it('should fail to delete the data and handle the error', async function(done) {
            try {
                await FirebaseService.remove('testFailure/');
            }
            catch(error) {
                done();
            }
        });
    });

    describe('The user can push data to a particular path.', function() {
        this.timeout(10000);

        it('should push data to a particular path and return an id', async function(done) {
            const testDataId = await FirebaseService.push('test/', {
                test: 'this is test data'
            });
            assert.isDefined(testDataId);
            done();
        });

        //TODO this error isn't being handled for some reason. It seems like Firebase is throwing the error for us, and we can't reach it
        // it('should fail to push the data and handle the error', async function(done) {
        //     try {
        //         await FirebaseService.push('testFailure/', {
        //             test: 'this is test data'
        //         });
        //     }
        //     catch(error) {
        //         done();
        //     }
        // });
    });
});

import {FirebaseService} from '../firebase.service.ts';

describe('Running FirebaseService tests again with multiple imports in the app', function() {
    this.timeout(10000);

    describe('The user can initialize and switch between Firebase databases.', function() {
        it('should initialize the database once without error', function() {
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
        });

        it('should initialize the database multiple times without error', function() {
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
        });

        it('should allow multiple distinct Firebase databases to be initialized', function() {
            FirebaseService.init('AIzaSyANTSoOA6LZZDxM7vqIlAl37B7IqWL-6MY', 'prendus.firebaseapp.com', 'https://prendus.firebaseio.com', 'prendus.appspot.com', 'Prendus');
        });

        it('should allow switching between Firebase databases', function() {
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            FirebaseService.init('AIzaSyANTSoOA6LZZDxM7vqIlAl37B7IqWL-6MY', 'prendus.firebaseapp.com', 'https://prendus.firebaseio.com', 'prendus.appspot.com', 'Prendus');
            FirebaseService.init('AIzaSyBFco72QIZPNssZVjp8M_7XA7aOZO4UqZQ', 'resplendent-fire-9351.firebaseapp.com', 'https://resplendent-fire-9351.firebaseio.com', 'resplendent-fire-9351.appspot.com', 'Solutia Maxima');
            FirebaseService.init('AIzaSyANTSoOA6LZZDxM7vqIlAl37B7IqWL-6MY', 'prendus.firebaseapp.com', 'https://prendus.firebaseio.com', 'prendus.appspot.com', 'Prendus');
        });
    });

});
