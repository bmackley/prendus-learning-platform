import {FirebaseService} from '../services/firebase.service.ts';
import {Quiz} from '../interfaces/quiz.interface.ts';

const dataPath = 'quizzes';

const createOrUpdate = async (id: string, data: Quiz) => {
    try {
        if (id) {
            const path: string = `${dataPath}/${id}`;
            await FirebaseService.update(path, data);

            return id;
        }
        else {
            const timestampEnabledData = Object.assign({}, data, {
                timestamp: window.firebase.database.ServerValue.TIMESTAMP
            });

            const path = dataPath;
            return await FirebaseService.push(path, timestampEnabledData);
        }
    }
    catch(error) {
        throw error;
    }
};

const getById = async (id: string) => {
    try {
        const path: string = `${dataPath}/${id}`;
        const quiz: Quiz = await FirebaseService.get(path);
        return quiz;
    }
    catch(error) {
        throw error;
    }
};

const removeById = async (id: string): Promise<void> => {
    try {
        await FirebaseService.remove(`${dataPath}/${id}`);
    }
    catch(error) {
        throw error;
    }
};

//TODO I think this is obsolete, just use createOrUpdate
// const update = async (id: string, data: Quiz): Promise<void> => {
//     const path = `${dataPath}/${id}`;
//     await FirebaseService.update(path, data);
// };

const associateQuestion = async (quizId: string, questionId: string) => {
    try {
        const path = `${dataPath}/${quizId}/questions/${questionId}/settings`;

        await FirebaseService.set(path, {
            answerFeedback: true,
            showAnswer: true,
            showHint: true,
            showCode: true,
            graded: true,
            showConfidenceLevel: true,
            allowGeneration: true
        });
    }
    catch(error) {
        throw error;
    }
};

const disassociateQuestion = async (quizId: string, questionId: string) => {
    try {
        const path = `${dataPath}/${quizId}/questions/${questionId}`;
        await FirebaseService.remove(path);
    }
    catch(error) {
        throw error;
    }
};

const associateCollaborator = async (quizId: string, uid: string): Promise<void> => {
    try {
        const path = `${dataPath}/${quizId}/collaborators/${uid}`;
        await FirebaseService.set(path, uid);
    }
    catch(error) {
        throw error;
    }
};

const disassociateCollaborator = async (quizId: string, uid: string): Promise<void> => {
    try {
        const path = `${dataPath}/${quizId}/collaborators/${uid}`;
        await FirebaseService.remove(path);
    }
    catch(error) {
        throw error;
    }
};

const getCollaboratorUids = async (quizId: string): Promise<string[]> => {
    try {
        const path = `${dataPath}/${quizId}/collaborators`;
        const collaboratorUidsObject = await FirebaseService.get(path);
        const collaboratorUids = Object.keys(collaboratorUidsObject || {});

        return collaboratorUids;
    }
    catch(error) {
        throw error;
    }
};

const setQuestionSetting = async (quizId: string, questionId: string, settingName: string, value: boolean | number) => {
    try {
        const path = `${dataPath}/${quizId}/questions/${questionId}/settings/${settingName}`;
        await FirebaseService.set(path, value);
    }
    catch(error) {
        throw error;
    }
};

const setQuizSetting = async (quizId: string, settingName: string, value: boolean | number) => {
    try {
        const path = `${dataPath}/${quizId}/quizSettings/${settingName}`;
        await FirebaseService.set(path, value);
    }
    catch(error) {
        throw error;
    }
};

const getQuizSettings = async (quizId: string) => {
    try {
        const path = `${dataPath}/${quizId}/quizSettings`;
        return await FirebaseService.get(path);
    }
    catch(error) {
        throw error;
    }
};

const updateTitle = async (quizId: string, value: string) => {
    try {
        const path = `${dataPath}/${quizId}/title`;
        await FirebaseService.set(path, value);
    }
    catch(error) {
        throw error;
    }
};

const getQuestionIds = async (quizId: string) => {
    try {
        const path = `${dataPath}/${quizId}/questions`;
        const questionsObject = await FirebaseService.get(path);

        return Object.keys(questionsObject || {});
    }
    catch(error) {
        throw error;
    }
};

export const QuizModel = {
    dataPath,
    createOrUpdate,
    getById,
    removeById,
    associateQuestion,
    getQuestionIds,
    disassociateQuestion,
    setQuestionSetting,
    setQuizSetting,
    getQuizSettings,
    updateTitle,
    associateCollaborator,
    getCollaboratorUids,
    disassociateCollaborator
};
