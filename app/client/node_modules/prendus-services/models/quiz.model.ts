import {FirebaseService} from '../services/firebase.service.ts';
import {Quiz} from '../interfaces/quiz.interface.ts';

const dataPath = 'quizzes';

const createOrUpdate = async (id: string, data: Quiz) => {
    if (id) {
        const path: string = `${dataPath}/${id}`;
        await FirebaseService.update(path, data);

        return id;
    }
    else {
        const timestampEnabledData = Object.assign({}, data, {
            timestamp: window.firebase.database.ServerValue.TIMESTAMP
        });

        const path = dataPath;
        return await FirebaseService.push(path, timestampEnabledData);
    }
};

const getById = async (id: string) => {
    const path: string = `${dataPath}/${id}`;
    const quiz: Quiz = await FirebaseService.get(path);
    return quiz;
};

const removeById = async (id: string): Promise<void> => {
    await FirebaseService.remove(`${dataPath}/${id}`);
};

//TODO I think this is obsolete, just use createOrUpdate
// const update = async (id: string, data: Quiz): Promise<void> => {
//     const path = `${dataPath}/${id}`;
//     await FirebaseService.update(path, data);
// };

const getAllByConcept = async (conceptId: string) => {
    const path = `${dataPath}`;

    const quizzesObject = await FirebaseService.getAllBy(path, 'conceptId', conceptId);
    const quizzesArray = Object.keys(quizzesObject || {}).map((key) => {
        return Object.assign({}, quizzesObject[key], {
            id: key
        });
    });

    return quizzesArray;
};

const addQuestion = async (quizId: string, questionId: string) => {
    const path = `${dataPath}/${quizId}/questions/${questionId}/settings`;

    await FirebaseService.set(path, {
        answerFeedback: true,
        showAnswer: true,
        showHint: true,
        showCode: true,
        graded: true,
        showConfidenceLevel: true,
        allowGeneration: true
    });
};

const addCollaborator = async (quizId: string, uid: string): Promise<void> => {
    const path = `${dataPath}/${quizId}/collaborators/${uid}`;
    await FirebaseService.set(path, uid);
};

const removeCollaborator = async (quizId: string, uid: string): Promise<void> => {
    const path = `${dataPath}/${quizId}/collaborators/${uid}`;
    await FirebaseService.remove(path);
};

const getCollaboratorUids = async (quizId: string): Promise<string[]> => {
    const path = `${dataPath}/${quizId}/collaborators`;
    const collaboratorUidsObject = await FirebaseService.get(path);
    const collaboratorUids = Object.keys(collaboratorUidsObject || {});

    return collaboratorUids;
};

const setQuestionSetting = async (quizId: string, questionId: string, settingName: string, value: boolean | number) => {
    const path = `${dataPath}/${quizId}/questions/${questionId}/settings/${settingName}`;
    await FirebaseService.set(path, value);
};

const setQuizSetting = async (quizId: string, settingName: string, value: boolean | number) => {
    const path = `${dataPath}/${quizId}/quizSettings/${settingName}`;
    await FirebaseService.set(path, value);
};

const getQuizSettings = async (quizId: string) => {
    const path = `${dataPath}/${quizId}/quizSettings`;
    return await FirebaseService.get(path);
};

const updateTitle = async (quizId: string, value: string) => {
    const path = `${dataPath}/${quizId}/title`;
    await FirebaseService.set(path, value);
};

const removeQuestion = async (quizId: string, questionId: string) => {
    const path = `${dataPath}/${quizId}/questions/${questionId}`;

    await FirebaseService.remove(path);
};

const getAllQuestionIds = async (quizId: string) => {
    const path = `${dataPath}/${quizId}/questions`;

    const questionsObject = await FirebaseService.get(path);

    return Object.keys(questionsObject || {});
};

export const QuizModel = {
    createOrUpdate,
    getById,
    removeById,
    getAllByConcept,
    addQuestion,
    getAllQuestionIds,
    removeQuestion,
    setQuestionSetting,
    setQuizSetting,
    getQuizSettings,
    updateTitle,
    addCollaborator,
    getCollaboratorUids,
    removeCollaborator
};
