"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const firebase_service_ts_1 = require('../services/firebase.service.ts');
const dataPath = 'videos';
const createOrUpdate = (id, data) => __awaiter(this, void 0, void 0, function* () {
    if (id) {
        const path = `${dataPath}/${id}`;
        yield firebase_service_ts_1.FirebaseService.update(path, data);
        return id;
    }
    else {
        const timestampEnabledData = Object.assign({}, data, {
            timestamp: window.firebase.database.ServerValue.TIMESTAMP
        });
        const path = dataPath;
        return yield firebase_service_ts_1.FirebaseService.push(path, timestampEnabledData);
    }
});
const getById = (id) => __awaiter(this, void 0, void 0, function* () {
    const path = `${dataPath}/${id}`;
    const video = yield firebase_service_ts_1.FirebaseService.get(path);
    return video;
});
const removeById = (id) => __awaiter(this, void 0, void 0, function* () {
    yield firebase_service_ts_1.FirebaseService.remove(`${dataPath}/${id}`);
});
const update = (id, data) => __awaiter(this, void 0, void 0, function* () {
    const path = `${dataPath}/${id}`;
    yield firebase_service_ts_1.FirebaseService.update(path, data);
});
const getAllByConcept = (conceptId) => __awaiter(this, void 0, void 0, function* () {
    const path = `${dataPath}`;
    const videosObject = yield firebase_service_ts_1.FirebaseService.getAllBy(path, 'conceptId', conceptId);
    const videosArray = Object.keys(videosObject || {}).map((key) => {
        return Object.assign({}, videosObject[key], {
            id: key
        });
    });
    return videosArray;
});
exports.VideoModel = {
    createOrUpdate: createOrUpdate,
    update: update,
    getById: getById,
    removeById: removeById,
    getAllByConcept: getAllByConcept
};
