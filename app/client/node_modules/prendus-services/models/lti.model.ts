import {FirebaseService} from '../services/firebase.service.ts';
import {UtilitiesService} from '../services/utilities.service.ts';

const dataPath = 'ltiKeysAndSecrets';

const createAndSaveSecretIfNotCreated = async (key: string): Promise<string> => {
    const secret: string = await getSecret(key);
    const path: string = `${dataPath}/${key}`;
    await FirebaseService.set(path, secret);

    async function getSecret(key: string): Promise<string> {
        const existingSecret: string = await getByKey(key);

        if (!existingSecret) {
            return UtilitiesService.createUUID();
        }
        else {
            return existingSecret;
        }
    }

    return secret;
};

const removeByKey = async (key: string): Promise<void> => {
    await FirebaseService.remove(`${dataPath}/${key}`);
};

const getByKey = async (key: string): Promise<string> => {
    const path: string = `${dataPath}/${key}`;
    const secret: string = await FirebaseService.get(path);
    return secret;
};

export const LTIModel = {
    createAndSaveSecretIfNotCreated,
    getByKey,
    removeByKey
};
