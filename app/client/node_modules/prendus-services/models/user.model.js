"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const firebase_service_ts_1 = require('../services/firebase.service.ts');
const dataPath = 'users';
const save = (id, data) => __awaiter(this, void 0, void 0, function* () {
    try {
        if (id) {
            const path = `${dataPath}/${id}`;
            yield firebase_service_ts_1.FirebaseService.update(path, data);
            return id;
        }
        else {
            const path = dataPath;
            const newId = yield firebase_service_ts_1.FirebaseService.push(path, data);
            return newId;
        }
    }
    catch (error) {
        throw error;
    }
});
const updateFirebaseUser = (loggedInUser, email) => __awaiter(this, void 0, void 0, function* () {
    try {
        yield firebase_service_ts_1.FirebaseService.updateUserProfile(loggedInUser, email);
    }
    catch (error) {
        throw error;
    }
});
const updateMetaData = (id, data) => __awaiter(this, void 0, void 0, function* () {
    try {
        const newPath = `${dataPath}/${id}/metaData`;
        yield firebase_service_ts_1.FirebaseService.update(newPath, data);
    }
    catch (error) {
        throw error;
    }
});
const getById = (id) => __awaiter(this, void 0, void 0, function* () {
    try {
        const newPath = `${dataPath}/${id}`;
        const userData = yield firebase_service_ts_1.FirebaseService.get(newPath);
        return userData;
    }
    catch (error) {
        throw error;
    }
});
const getMetaDataById = (id, path) => __awaiter(this, void 0, void 0, function* () {
    try {
        const newPath = `${dataPath}/${id}/metaData`;
        const userData = yield firebase_service_ts_1.FirebaseService.get(newPath);
        return userData;
    }
    catch (error) {
        throw error;
    }
});
exports.UserModel = {
    save: save,
    updateFirebaseUser: updateFirebaseUser,
    updateMetaData: updateMetaData,
    getById: getById,
    getMetaDataById: getMetaDataById,
};
