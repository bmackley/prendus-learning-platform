import {Question} from '../interfaces/question.interface.ts';
import {FirebaseService} from '../services/firebase.service.ts';

const dataPath = 'questions';

const save = async (id: string, data: Question): Promise<string> => {

    const user: any = await FirebaseService.getLoggedInUser();

    const dataWithUid: Question = Object.assign({}, data, {
        uid: user.uid
    });

    if (id) {
        const path: string = `${dataPath}/${id}`;
        await FirebaseService.set(path, dataWithUid);

        return id;
    }
    else {
        const timestampEnabledData: Question = Object.assign({}, dataWithUid, {
            timestamp: window.firebase.database.ServerValue.TIMESTAMP
        });

        const path: string = dataPath;
        return await FirebaseService.push(path, timestampEnabledData);
    }
};

const update = async (id: string, data: Question): Promise<void> => {
    const path = `${dataPath}/${id}`;
    await FirebaseService.update(path, data);
};

const removeById = async (id: string): Promise<void> => {
    await FirebaseService.remove(`${dataPath}/${id}`);
};

const getById = async (id: string): Promise<Question> => {
    const path: string = `${dataPath}/${id}`;
    const question: Question = await FirebaseService.get(path);
    return question;
};

const getAllIdsByUid = async(uid: string): Promise<string[]> => {
    const path = `${dataPath}`;

    const questionsObject = await FirebaseService.getAllBy(path, 'uid', uid);
    const questionsArray = Object.keys(questionsObject || {}).map((key) => {
        return Object.assign({}, questionsObject[key], {
            id: key
        });
    });
    const noPreviewQuestionsArray = questionsArray.filter((element) => {
        return element.previewQuestionId;
    });
    const noPreviewsQuestionsKeys = noPreviewQuestionsArray.map((element) => {
        return element.id;
    });

    return noPreviewsQuestionsKeys;
};

export const QuestionModel = {
    save,
    getById,
    removeById,
    update,
    getAllIdsByUid
};
