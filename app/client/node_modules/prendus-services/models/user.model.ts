import {FirebaseService} from '../services/firebase.service.ts'
import {UserMetaData} from '../interfaces/user-meta-data.interface.ts';
import {User} from '../interfaces/user.interface.ts';


const dataPath = 'users';
const save = async (id: string, data: User): Promise<string> => {
  try{
    if (id) {
      const path = `${dataPath}/${id}`;
      await FirebaseService.update(path, data);
      return id;
    }
    else {
      const path = dataPath;
      const newId = await FirebaseService.push(path, data);
      return newId;
    }
  }catch(error){
    throw error;
  }
};
const updateFirebaseUser = async (loggedInUser: any, email: string): Promise<void> => {
  try{
    await FirebaseService.updateUserProfile(loggedInUser, email)
  }catch(error){
    throw error;
  }
};
const updateMetaData = async (id: string, data: UserMetaData): Promise<void> => {
  try{
    const newPath = `${dataPath}/${id}/metaData`;
    await FirebaseService.update(newPath, data);
  }catch(error){
    throw error;
  }
};
const getById = async (id: string): Promise<User> => {
  try{
    const newPath = `${dataPath}/${id}`
    const userData = await FirebaseService.get(newPath);
    return userData;
  }catch(error){
    throw error;
  }
};
const getMetaDataById = async (id: string): Promise<UserMetaData> => {
  try{
    const newPath = `${dataPath}/${id}/metaData`;
    const userData = await FirebaseService.get(newPath);
    return userData;
  }catch(error){
    throw error;
  }
};

export const UserModel = {
    save,
    updateFirebaseUser,
    updateMetaData,
    getById,
    getMetaDataById,
}
