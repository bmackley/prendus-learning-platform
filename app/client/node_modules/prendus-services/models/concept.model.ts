import {FirebaseService} from '../services/firebase.service.ts';
import {Concept} from '../interfaces/concept.interface.ts';
import {VideoModel} from './video.model.ts';
import {QuizModel} from './quiz.model.ts';
import {UtilitiesService} from '../services/utilities.service.ts';

const dataPath = 'concepts';
const save = async (id: string, data: Concept): Promise<string> => {
  try{
    if (id) {
        const path = `${dataPath}/${id}`;
        await FirebaseService.set(path, data);
        return id;
    }
    else {
        const path = dataPath;
        const conceptId =  await FirebaseService.push(path, data);
        return conceptId;
    }
  }catch(error){
    throw error;
  }
};
const getById = async (id: string) => {
  try{
    const path = `${dataPath}/${id}`
    const concept = await FirebaseService.get(path);
    return concept;
  }catch(error){
    return error;
  }
};
const getConceptsByCourse = async (courseConcepts: Concept) => {
  try{
    let courseConceptsList = {};
    for(let key in courseConcepts){
      const firebaseConcept = await getById(courseConcepts[key]);
      firebaseConcept.id = key;
      courseConceptsList.push(firebaseConcept)
    }
    return courseConceptsList;
  }catch(error){
    throw error;
  }
};
const deleteConcept = async (key: string) => {
  try{
    const path = `${dataPath}/${key}`;
    let conceptDelete = await FirebaseService.remove(path);
  }catch(error){
    throw error;
  }
};
const conceptsObjectToArray = (conceptsObject: Concept) => {
  try{
    var conceptsArray = Object.keys(conceptsObject).map(function (key) {return conceptsObject[key]});
    return conceptsArray;
  }catch(error){
    throw error;
  }
}

const addCollaborator = async (conceptId: string, uid: string): Promise<void> => {
    try {
        //TODO it would be nice to do the following in a transaction, so that if adding collaborators fails anywhere it fails everywhere
        const path = `${dataPath}/${conceptId}/collaborators/${uid}`;
        await FirebaseService.set(path, uid);

        const videosPath = `${dataPath}/${conceptId}/videos`;
        const videosObject = await FirebaseService.get(videosPath);
        const videoIds = Object.keys(videosObject || {});

        await UtilitiesService.asyncForEach(videoIds, async (videoId: string) => {
            await VideoModel.addCollaborator(videoId, uid);
        });

        const quizzesPath = `${dataPath}/${conceptId}/quizzes`;
        const quizzesObject = await FirebaseService.get(quizzesPath);
        const quizIds = Object.keys(quizzesObject || {});

        await UtilitiesService.asyncForEach(quizIds, async (quizId: string) => {
            await VideoModel.addCollaborator(quizId, uid);
        });
    }
    catch(error) {
        throw error;
    }
};

const removeCollaborator = async (conceptId: string, uid: string): Promise<void> => {
    try {
        //TODO it would be nice to do the following in a transaction, so that if adding collaborators fails anywhere it fails everywhere
        const path = `${dataPath}/${conceptId}/collaborators/${uid}`;
        await FirebaseService.remove(path);

        const videosPath = `${dataPath}/${conceptId}/videos`;
        const videosObject = await FirebaseService.get(videosPath);
        const videoIds = Object.keys(videosObject || {});

        await UtilitiesService.asyncForEach(videoIds, async (videoId: string) => {
            await VideoModel.removeCollaborator(videoId, uid);
        });

        const quizzesPath = `${dataPath}/${conceptId}/quizzes`;
        const quizzesObject = await FirebaseService.get(quizzesPath);
        const quizIds = Object.keys(quizzesObject || {});

        await UtilitiesService.asyncForEach(quizIds, async (quizId: string) => {
            await VideoModel.removeCollaborator(quizId, uid);
        });
    }
    catch(error) {
        throw error;
    }
};

const getCollaboratorUids = async (conceptId: string): Promise<string[]> => {
    try {
      const path = `${dataPath}/${conceptId}/collaborators`;
      const collaboratorUidsObject = await FirebaseService.get(path);
      const collaboratorUids = Object.keys(collaboratorUidsObject || {});
      return collaboratorUids;
    }
    catch(error){
      throw error;
    }
};

export const ConceptModel = {
    save,
    getById,
    getConceptsByCourse,
    deleteConcept,
    conceptsObjectToArray,
    addCollaborator,
    removeCollaborator,
    getCollaboratorUids,
    dataPath
}
