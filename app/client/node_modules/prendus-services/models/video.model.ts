import {FirebaseService} from '../services/firebase.service.ts';
import {Video} from '../interfaces/video.interface.ts';

const dataPath = 'videos';

const createOrUpdate = async (id: string, data: Video) => {
    try {
        if (id) {
            const path: string = `${dataPath}/${id}`;
            await FirebaseService.update(path, data);

            return id;
        }
        else {
            const timestampEnabledData = Object.assign({}, data, {
                timestamp: window.firebase.database.ServerValue.TIMESTAMP
            });

            const path = dataPath;
            return await FirebaseService.push(path, timestampEnabledData);
        }
    }
    catch(error) {
        throw error;
    }
};

const getById = async (id: string) => {
    try {
        const path: string = `${dataPath}/${id}`;
        const video: Video = await FirebaseService.get(path);
        return video;
    }
    catch(error) {
        throw error;
    }
};

const removeById = async (id: string): Promise<void> => {
    try {
        await FirebaseService.remove(`${dataPath}/${id}`);
    }
    catch(error) {
        throw error;
    }
};

const update = async (id: string, data: Video): Promise<void> => {
    try {
        const path = `${dataPath}/${id}`;
        await FirebaseService.update(path, data);
    }
    catch(error) {
        throw error;
    }
<<<<<<< HEAD
};

const associateCollaborator = async (videoId: string, uid: string): Promise<void> => {
=======
};

const getAllByConcept = async (conceptId: string) => {
    try {
        const path = `${dataPath}`;

        const videosObject = await FirebaseService.getAllBy(path, 'conceptId', conceptId);
        const videosArray = Object.keys(videosObject || {}).map((key) => {
            return Object.assign({}, videosObject[key], {
                id: key
            });
        });

        return videosArray;
    }
    catch(error) {
        throw error;
    }
};

const addCollaborator = async (videoId: string, uid: string): Promise<void> => {
>>>>>>> develop
    try {
        const path = `${dataPath}/${videoId}/collaborators/${uid}`;
        await FirebaseService.set(path, uid);
    }
    catch(error) {
        throw error;
    }
};

<<<<<<< HEAD
const disassociateCollaborator = async (videoId: string, uid: string): Promise<void> => {
=======
const removeCollaborator = async (videoId: string, uid: string): Promise<void> => {
>>>>>>> develop
    try {
        const path = `${dataPath}/${videoId}/collaborators/${uid}`;
        await FirebaseService.remove(path);
    }
    catch(error) {
        throw error;
    }
};

const getCollaboratorUids = async (videoId: string): Promise<string[]> => {
    try {
        const path = `${dataPath}/${videoId}/collaborators`;
        const collaboratorUidsObject = await FirebaseService.get(path);
        const collaboratorUids = Object.keys(collaboratorUidsObject || {});

        return collaboratorUids;
    }
    catch(error) {
        throw error;
    }
};

export const VideoModel = {
    createOrUpdate,
    update,
    getById,
    removeById,
    associateCollaborator,
    disassociateCollaborator,
    getCollaboratorUids,
    dataPath
};
