import {FirebaseService} from '../services/firebase.service.ts';
import {Video} from '../interfaces/video.interface.ts';

const dataPath = 'videos';

const createOrUpdate = async (id: string, data: Video) => {
    if (id) {
        const path: string = `${dataPath}/${id}`;
        await FirebaseService.update(path, data);

        return id;
    }
    else {
        const timestampEnabledData = Object.assign({}, data, {
            timestamp: window.firebase.database.ServerValue.TIMESTAMP
        });

        const path = dataPath;
        return await FirebaseService.push(path, timestampEnabledData);
    }
};

const getById = async (id: string) => {
    const path: string = `${dataPath}/${id}`;
    const video: Video = await FirebaseService.get(path);
    return video;
};

const removeById = async (id: string): Promise<void> => {
    await FirebaseService.remove(`${dataPath}/${id}`);
};

const update = async (id: string, data: Video): Promise<void> => {
    const path = `${dataPath}/${id}`;
    await FirebaseService.update(path, data);
};

const getAllByConcept = async (conceptId: string) => {
    const path = `${dataPath}`;

    const videosObject = await FirebaseService.getAllBy(path, 'conceptId', conceptId);
    const videosArray = Object.keys(videosObject || {}).map((key) => {
        return Object.assign({}, videosObject[key], {
            id: key
        });
    });

    return videosArray;
};

const addCollaborator = async (videoId: string, uid: string): Promise<void> => {
    const path = `${dataPath}/${videoId}/collaborators/${uid}`;
    await FirebaseService.set(path, uid);
};

const removeCollaborator = async (videoId: string, uid: string): Promise<void> => {
    const path = `${dataPath}/${videoId}/collaborators/${uid}`;
    await FirebaseService.remove(path);
};

const getCollaboratorUids = async (videoId: string): Promise<string[]> => {
    const path = `${dataPath}/${videoId}/collaborators`;
    const collaboratorUidsObject = await FirebaseService.get(path);
    const collaboratorUids = Object.keys(collaboratorUidsObject || {});

    return collaboratorUids;
};

export const VideoModel = {
    createOrUpdate,
    update,
    getById,
    removeById,
    getAllByConcept,
    addCollaborator,
    removeCollaborator,
    getCollaboratorUids
};
