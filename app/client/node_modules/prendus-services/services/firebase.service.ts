const prendusFirebaseApps = {};
let prendusFirebaseApp: any;

const set = async (path: string, data: any): Promise<void> => {
    try {
        await prendusFirebaseApp.database().ref(path).set(data);
    }
    catch(error) {
        throw error;
    }
};

const remove = async (path: string): Promise<void> => {
    try {
        await prendusFirebaseApp.database().ref(path).set(null);
    }
    catch(error) {
        throw error;
    }
};

const push = async (path: string, data: any): Promise<string> => {
    try {
        const newId = await prendusFirebaseApp.database().ref(path).push(data).key;
        return newId;
    }
    catch(error) {
        throw error;
    }
};

const get = async (path: string): Promise<any> => {
    try {
        const dataSnapshot = await prendusFirebaseApp.database().ref(path).once('value');
        return dataSnapshot.val();
    }
    catch(error) {
        throw error;
    }
};

const update = async (path: string, data: any): Promise<void> => {
    try {
        await prendusFirebaseApp.database().ref(path).update(data);
    }
    catch(error) {
        throw error;
    }
};

const getAllBy = async (path: string, key: string, value: string): Promise<any> => {
    try {
        const dataSnapshot = await prendusFirebaseApp.database().ref(path).orderByChild(key).equalTo(value).once('value');
        return dataSnapshot.val();
    }
    catch(error) {
        throw error;
    }
};

const createUserWithEmailAndPassword = async (email: string, password: string): Promise<any> => {
    try {
        const user = await prendusFirebaseApp.auth().createUserWithEmailAndPassword(email, password);
        return user;
    }
    catch(error) {
        throw error;
    }
};

const logInUserWithEmailAndPassword = async (email: string, password: string): Promise<any> => {
    try {
        const user = await prendusFirebaseApp.auth().signInWithEmailAndPassword(email, password);
        return user;
    }
    catch(error) {
        throw error;
    }
};

const logOutUser = async (): Promise<void> => {
    await prendusFirebaseApp.auth().signOut();
};

const getLoggedInUser = (): Promise<any> => {
    return new Promise((resolve, reject) => {
        prendusFirebaseApp.auth().onAuthStateChanged((user: any) => {
            resolve(user);
        });
    });
};
const updateUserProfile = async (loggedInUser: any, email: string) => {
  //this function will be updated in the future to include other parameters besides just email. Or it could be updated. Who knows if it will end up getting updated.
  try {
    await loggedInUser.updateEmail(email);
  }catch(error){
    throw error;
  }
};

const init = (apiKey: string, authDomain: string, databaseURL: string, storageBucket: string, name: string): void => {

    prendusFirebaseApp = prendusFirebaseApps[name];

    if (!prendusFirebaseApp) {
        prendusFirebaseApp = window.firebase.initializeApp({
            apiKey,
            authDomain,
            databaseURL,
            storageBucket
        }, name);

        prendusFirebaseApps[name] = prendusFirebaseApp;
    }
};

export const FirebaseService = {
    init,
    set,
    remove,
    push,
    get,
    update,
    createUserWithEmailAndPassword,
    logInUserWithEmailAndPassword,
    logOutUser,
    getLoggedInUser,
    updateUserProfile,
    getAllBy
};
