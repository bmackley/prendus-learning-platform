"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const prendusFirebaseApps = {};
let prendusFirebaseApp;
const set = (path, data) => __awaiter(this, void 0, void 0, function* () {
    try {
        yield prendusFirebaseApp.database().ref(path).set(data);
    }
    catch (error) {
        throw error;
    }
});
const remove = (path) => __awaiter(this, void 0, void 0, function* () {
    try {
        yield prendusFirebaseApp.database().ref(path).set(null);
    }
    catch (error) {
        throw error;
    }
});
const push = (path, data) => __awaiter(this, void 0, void 0, function* () {
    try {
        const newId = yield prendusFirebaseApp.database().ref(path).push(data).key;
        return newId;
    }
    catch (error) {
        throw error;
    }
});
const get = (path) => __awaiter(this, void 0, void 0, function* () {
    try {
        const dataSnapshot = yield prendusFirebaseApp.database().ref(path).once('value');
        return dataSnapshot.val();
    }
    catch (error) {
        throw error;
    }
});
const update = (path, data) => __awaiter(this, void 0, void 0, function* () {
    try {
        yield prendusFirebaseApp.database().ref(path).update(data);
    }
    catch (error) {
        throw error;
    }
});
const getAllBy = (path, key, value) => __awaiter(this, void 0, void 0, function* () {
    try {
        const dataSnapshot = yield prendusFirebaseApp.database().ref(path).orderByChild(key).equalTo(value).once('value');
        return dataSnapshot.val();
    }
    catch (error) {
        throw error;
    }
});
const createUserWithEmailAndPassword = (email, password) => __awaiter(this, void 0, void 0, function* () {
    try {
        const user = yield prendusFirebaseApp.auth().createUserWithEmailAndPassword(email, password);
        return user;
    }
    catch (error) {
        throw error;
    }
});
const logInUserWithEmailAndPassword = (email, password) => __awaiter(this, void 0, void 0, function* () {
    try {
        const user = yield prendusFirebaseApp.auth().signInWithEmailAndPassword(email, password);
        return user;
    }
    catch (error) {
        throw error;
    }
});
const logOutUser = () => __awaiter(this, void 0, void 0, function* () {
    yield prendusFirebaseApp.auth().signOut();
});
const getLoggedInUser = () => {
    return new Promise((resolve, reject) => {
        prendusFirebaseApp.auth().onAuthStateChanged((user) => {
            resolve(user);
        });
    });
};
const updateUserProfile = (loggedInUser, email) => __awaiter(this, void 0, void 0, function* () {
    try {
        yield loggedInUser.updateEmail(email);
    }
    catch (error) {
        throw error;
    }
});
const init = (apiKey, authDomain, databaseURL, storageBucket, name) => {
    prendusFirebaseApp = prendusFirebaseApps[name];
    if (!prendusFirebaseApp) {
        prendusFirebaseApp = window.firebase.initializeApp({
            apiKey: apiKey,
            authDomain: authDomain,
            databaseURL: databaseURL,
            storageBucket: storageBucket
        }, name);
        prendusFirebaseApps[name] = prendusFirebaseApp;
    }
};
exports.FirebaseService = {
    init: init,
    set: set,
    remove: remove,
    push: push,
    get: get,
    update: update,
    createUserWithEmailAndPassword: createUserWithEmailAndPassword,
    logInUserWithEmailAndPassword: logInUserWithEmailAndPassword,
    logOutUser: logOutUser,
    getLoggedInUser: getLoggedInUser,
    updateUserProfile: updateUserProfile,
    getAllBy: getAllBy
};
