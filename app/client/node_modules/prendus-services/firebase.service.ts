const prendusFirebaseApps = {};
let prendusFirebaseApp;

const set = async (path, data) => {
    try {
        await prendusFirebaseApp.database().ref(path).set(data);
    }
    catch(error) {
        throw error;
    }
};

const remove = async (path) => {
    try {
        await prendusFirebaseApp.database().ref(path).set(null);
    }
    catch(error) {
        throw error;
    }
};

const push = async (path, data) => {
    try {
        const newId = await prendusFirebaseApp.database().ref(path).push(data).key;
        return newId;
    }
    catch(error) {
        throw error;
    }
};

const get = async (path) => {
    try {
        const dataSnapshot = await prendusFirebaseApp.database().ref(path).once('value');
        console.log(dataSnapshot)
        return dataSnapshot.val();
    }
    catch(error) {
        throw error;
    }
};

const createUserWithEmailAndPassword = async (email, password) => {
    try {
        const user = await prendusFirebaseApp.auth().createUserWithEmailAndPassword(email, password);
        return user;
    }
    catch(error) {
        throw error;
    }
};

const logInUserWithEmailAndPassword = async (email, password) => {
    try {
        const user = await prendusFirebaseApp.auth().signInWithEmailAndPassword(email, password);
        return user;
    }
    catch(error) {
        throw error;
    }
};

const logOutUser = async () => {
    await prendusFirebaseApp.auth().signOut();
};

const getLoggedInUser = () => {
    return window.firebase.User.currentUser;
};

const init = (apiKey, authDomain, databaseURL, storageBucket, name) => {
    prendusFirebaseApp = prendusFirebaseApps[name];

    if (!prendusFirebaseApp) {
        prendusFirebaseApp = window.firebase.initializeApp({
            apiKey,
            authDomain,
            databaseURL,
            storageBucket
        }, name);

        prendusFirebaseApps[name] = prendusFirebaseApp;
    }
};

export const FirebaseService = {
    init,
    set,
    remove,
    push,
    get,
    createUserWithEmailAndPassword,
    logInUserWithEmailAndPassword,
    logOutUser,
    getLoggedInUser
};
